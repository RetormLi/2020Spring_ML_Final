#!/usr/bin/env python
# -*- encoding: utf-8 -*-

roads = {
    ('276183', '276184'): [(114.017324, 22.589055),
                           (114.028209, 22.591219),
                           (114.028139, 22.590853),
                           (114.017324, 22.586757)],
    ('275911', '275912'): [(114.017324, 22.586757),
                           (114.014567, 22.589144),
                           (114.016097, 22.603501),
                           (114.016412, 22.603728)],
    ('276240', '276241'): [(114.023718, 22.609377),
                           (114.016723, 22.603514),
                           (114.015564, 22.606564),
                           (114.022796, 22.610348)],
    ('276264', '276265'): [(114.027037, 22.59149),
                           (114.026608, 22.606308),
                           (114.027842, 22.605247),
                           (114.034633, 22.592266)],
    ('276268', '276269'): [(114.039355, 22.599193),
                           (114.031416, 22.60779),
                           (114.032451, 22.608082),
                           (114.039827, 22.599866)],
    ('276737', '276738'): [(114.030832, 22.602214),
                           (114.023188, 22.609672),
                           (114.024518, 22.610044),
                           (114.031664, 22.602551)]

}

# 1：西往东：[(0, 180)]
# 2：东往西：[(180, 360)]
# 3：南往北：[(0, 90), (270, 360)]
# 4：北往南：[(90, 270)]
roads_direction = {
    '276183': 1,
    '276184': 2,
    '275911': 3,
    '275912': 4,
    '276240': 1,
    '276241': 2,
    '276264': 3,
    '276265': 4,
    '276268': 3,
    '276269': 4,
    '276737': 4,
    '276738': 3,
},


def get_road(direction, roads):
    directions = [roads_direction[roads[0]], roads_direction[roads[1]]]


def get_block_rec(block):
    # 上下左右
    block_rec = [max([i[1] for i in block]),
                 min([i[1] for i in block]),
                 min([i[0] for i in block]),
                 max([i[0] for i in block])]
    return block_rec


def in_block(sample, block, block_rec):
    # 初筛，上下左右
    x, y = sample
    if y > block_rec[0] or \
            y < block_rec[1] or \
            x < block_rec[2] or \
            x > block_rec[3]:
        return False
    # 细筛，计算四边形
    A, B, C, D = block
    # 顺时针的格子顶点，若逆时针方向则false
    a = (B[0]-A[0])*(y-A[1])-(B[1]-A[1])*(x-A[0])
    b = (C[0]-B[0])*(y-B[1])-(C[1]-B[1])*(x-B[0])
    c = (D[0]-C[0])*(y-C[1])-(D[1]-C[1])*(x-C[0])
    d = (A[0]-D[0])*(y-D[1])-(A[1]-D[1])*(x-D[0])
    if (a > 0 and b > 0 and c > 0 and d > 0) or \
            (a < 0 and b < 0 and c < 0 and d < 0):
        return True
    return False
